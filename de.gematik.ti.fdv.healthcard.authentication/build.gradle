buildscript {
    dependencies {
        classpath "de.gematik:gematik-parent-plugin:1.2.1"
        classpath "de.gematik:documentation-plugin:1.1.2"

    }
}


apply plugin: "de.gematik.parent"
apply plugin: "de.gematik.publish"
apply plugin: "de.gematik.asciidoctor"
apply plugin: "de.gematik.javadoc"

group = 'de.gematik.ti.epa'

description = """HealthCard Authentication"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "0.8.4"
}

gematikDocumentation {
    projectShortcut = "HCAUTHN"
    documentVersionReference = "version_healthcard_authentication"
}

gematikPublish {
    name = "HealthCardAuthentication"
    description = "Library for HealthCard Authentication"
    gitHubProjectName = "ref-ePA-HealthCardAuthentication"
}

sourceSets {
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
        runtimeClasspath = project.sourceSets.main.compileClasspath + project.sourceSets.test.compileClasspath + fileTree("${buildDir}/resources/test") + fileTree("${buildDir}/resources/main") + fileTree("${buildDir}") + project.sourceSets.test.output + project.sourceSets.main.output
    }
}

dependencies {
    implementation group: 'de.gematik.ti', name: 'healthcard.access', version: '1.2.2'
    implementation group: 'de.gematik.ti', name: 'utils', version: '1.2.1'
    implementation group: 'de.gematik.ti', name: 'cardreader.provider.api', version: '1.2.1'
    implementation group: 'de.gematik.ti.epa', name: 'fdv.authentication.service.provider', version: '1.0.3'

    implementation group: 'de.gematik.ti', name: 'healthcard.control.common', version: '1.0.0'

    implementation group: 'de.gematik.ti', name: 'openhealthcard.events', version: '1.2.0'
    implementation group: 'org.greenrobot', name: 'eventbus', version: '3.1.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    testImplementation group: 'com.madgag.spongycastle', name: 'prov', version: '1.58.0.0'
    testImplementation group: 'com.madgag.spongycastle', name: 'core', version: '1.58.0.0'
    testImplementation group: 'de.gematik.ti', name: 'test.utils', version: '1.1.1'

    testCompile "org.mockito:mockito-core:2.7.13"

}

repositories {
    flatDir {
        dirs 'libs'
    }
}


task sourceJar(type: Jar) {
    classifier "sources"
    from "${project.buildDir}/../src/main/java/"
    include "**/*.java"
}
task testSourceJar(type: Jar) {
    classifier "test-sources"
    from "${project.buildDir}/../src/test/java/"
    include "**/*.java"
}
task adocJar(type: Jar) {
    classifier "adoc"
    from "${project.buildDir}/../doc"
    into "${project.name}"
    exclude "**/generated/**/*.*"

}
task javadocJar(type: Jar) {
    classifier "javadoc"
    from "${project.buildDir}/docs/javadoc/"
    into "${project.name}"
}

artifacts {
    archives sourceJar
    archives testSourceJar
    archives adocJar
    archives javadocJar
}

test {
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}
